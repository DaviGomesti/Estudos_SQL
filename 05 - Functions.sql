USE DISCIPLINA02
GO

--Função escalar
CREATE FUNCTION dbo.fn_Semestre(@data DATETIME)
RETURNS INT
AS
BEGIN
	DECLARE @semestre TINYINT
	SELECT @semestre =
		CASE
			WHEN DATEPART(mm,@data) > 6 THEN 2
			ELSE 1
		END

	RETURN(@SEMESTRE)
END;
GO

SELECT dbo.fn_Semestre(GETDATE());
GO
SELECT dbo.fn_Semestre('20150601');
GO

SELECT V.DATA, 'A compra foi realizada no semestre: ' + CAST(dbo.fn_Semestre(V.DATA) AS CHAR(1)) AS MSG
FROM VENDAS AS V;
GO

--Listar as compras do 1o semestre
SELECT V.*
FROM VENDAS AS V
WHERE dbo.fn_Semestre(V.DATA) = 1;
GO

--Função tabular (inline)
CREATE FUNCTION dbo.fn_totalCompras(@IDCLIENTE INT)
RETURNS TABLE
AS
RETURN
(
	SELECT V.IDCLIENTE, SUM(IV.VALOR) AS TOTAL
	FROM CLIENTES AS C
	INNER JOIN VENDAS AS V ON (V.IDCLIENTE = C.IDCLIENTE)
	INNER JOIN ITENS_VENDAS IV ON (IV.IDVENDA = V.IDVENDA)
	WHERE V.IDCLIENTE = @IDCLIENTE
	GROUP BY V.IDCLIENTE
);
GO

SELECT *
FROM dbo.fn_totalCompras(1);
GO


--Função tabular (multi-statement)
CREATE FUNCTION dbo.fn_UltimaCompraMelhoresClientes()
RETURNS @VENDAS TABLE(
	IDCLIENTE INT,
	DATA DATETIME
)
AS
BEGIN
	DECLARE @CLIENTES TABLE(
		IDCLIENTE INT
	)

	INSERT INTO @CLIENTES
	SELECT TOP 3 C.IDCLIENTE
	FROM CLIENTES AS C
	INNER JOIN VENDAS AS V ON (V.IDCLIENTE = C.IDCLIENTE)
	GROUP BY C.IDCLIENTE
	ORDER BY COUNT(*) DESC;

	INSERT INTO @VENDAS
	SELECT C.IDCLIENTE, MAX(V.DATA) AS DATA
	FROM CLIENTES AS C
	INNER JOIN VENDAS AS V ON (C.IDCLIENTE = V.IDCLIENTE)
	WHERE EXISTS(
		SELECT 1
		FROM @CLIENTES AS CLI
		WHERE CLI.IDCLIENTE = C.IDCLIENTE
	)
	GROUP BY C.IDCLIENTE;


	RETURN;
END;
GO

SELECT U.IDCLIENTE, U.DATA, C.NOME
FROM dbo.fn_UltimaCompraMelhoresClientes() as U
INNER JOIN CLIENTES AS C ON (C.IDCLIENTE = U.IDCLIENTE);
GO


--FUNÇOES COM CROSS APPLY
CREATE FUNCTION dbo.fn_primeira_venda(@IDCLIENTE INT)
RETURNS TABLE
AS
RETURN
(
	SELECT TOP 1 V.DATA
	FROM VENDAS AS V
	WHERE V.IDCLIENTE = @IDCLIENTE
	ORDER BY V.DATA ASC
);
GO

SELECT C.NOME, PV.DATA AS DT_PRIMEIRA_VENDA
FROM CLIENTES AS C
CROSS APPLY dbo.fn_primeira_venda(C.IDCLIENTE) as PV
ORDER BY 1, 2;
GO


--TRATAMENTO DE NULOS
SELECT dbo.fn_Semestre(NULL);
GO

ALTER FUNCTION dbo.fn_Semestre(@data DATETIME)
RETURNS INT
WITH RETURNS NULL ON NULL INPUT
AS
BEGIN
	DECLARE @semestre TINYINT
	SELECT @semestre =
		CASE
			WHEN DATEPART(mm,@data) > 6 THEN 2
			ELSE 1
		END

	RETURN(@SEMESTRE)
END;
GO

SELECT dbo.fn_Semestre(NULL);
GO

--Funções em Constraints
CREATE TABLE EXEMPLO(
	ID INT NOT NULL,
	DATA DATETIME NOT NULL
);
GO


ALTER TABLE EXEMPLO
ADD CONSTRAINT CHK_EXEMPLO_DATA CHECK(dbo.fn_Semestre(DATA) = 1);
GO

INSERT INTO EXEMPLO
SELECT 1, '20150101';
GO

SELECT *
FROM EXEMPLO;
GO

INSERT INTO EXEMPLO
SELECT 1, '20150701';
GO

SELECT *
FROM EXEMPLO;
GO

--Funções em colunas computadas
ALTER TABLE EXEMPLO
ADD Semestre AS dbo.fn_Semestre(DATA);
GO


--Performance: Escalar x Tabular inline x Tabular multi-statement - Aguarde o módulo de tunning :D